# Complete Multi-Container Examples
# These examples demonstrate real-world implementations with all necessary configurations

# Example 1: Complete E-commerce Application with All Sidecars
apiVersion: v1
kind: Namespace
metadata:
  name: ecommerce-demo

---
apiVersion: v1
kind: Secret
metadata:
  name: ecommerce-secrets
  namespace: ecommerce-demo
type: Opaque
data:
  db-url: cG9zdGdyZXNxbDovL3VzZXI6cGFzc0BkYi5leGFtcGxlLmNvbTo1NDMyL2VjbW1lcmNl  # postgresql://user:pass@db.example.com:5432/ecommerce
  jwt-secret: bXlfc3VwZXJfc2VjcmV0X2tleQ==  # my_super_secret_key
  redis-password: cmVkaXNwYXNzd29yZA==  # redispassword

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: ecommerce-demo
data:
  config.json: |
    {
      "server": {
        "port": 8080,
        "host": "0.0.0.0"
      },
      "database": {
        "pool_size": 20,
        "timeout": 30
      },
      "cache": {
        "ttl": 3600,
        "max_entries": 10000
      },
      "logging": {
        "level": "info",
        "format": "json"
      }
    }

---
apiVersion: v1
kind: Pod
metadata:
  name: ecommerce-complete
  namespace: ecommerce-demo
  labels:
    app: ecommerce
    version: v1.0
    tier: frontend
spec:
  securityContext:
    fsGroup: 2000
    runAsNonRoot: true
  
  # Init container to set up permissions and wait for dependencies
  initContainers:
  - name: init-permissions
    image: busybox:1.35
    command: ['sh', '-c']
    args:
    - |
      echo "Setting up permissions..."
      mkdir -p /shared/logs /shared/cache /shared/tmp
      chmod 755 /shared/logs /shared/cache /shared/tmp
      chown 1000:2000 /shared/logs /shared/cache /shared/tmp
      echo "Permissions set up completed"
    volumeMounts:
    - name: shared-storage
      mountPath: /shared
    securityContext:
      runAsUser: 0
  
  - name: wait-for-db
    image: busybox:1.35
    command: ['sh', '-c']
    args:
    - |
      echo "Waiting for database to be ready..."
      until nc -z postgres-service.default.svc.cluster.local 5432; do
        echo "Database not ready, waiting..."
        sleep 2
      done
      echo "Database is ready!"
  
  containers:
  # Main application container
  - name: ecommerce-app
    image: ecommerce:v1.0.0
    ports:
    - containerPort: 8080
      name: http
      protocol: TCP
    env:
    - name: NODE_ENV
      value: "production"
    - name: DATABASE_URL
      valueFrom:
        secretKeyRef:
          name: ecommerce-secrets
          key: db-url
    - name: JWT_SECRET
      valueFrom:
        secretKeyRef:
          name: ecommerce-secrets
          key: jwt-secret
    - name: REDIS_URL
      value: "redis://localhost:6379"
    - name: REDIS_PASSWORD
      valueFrom:
        secretKeyRef:
          name: ecommerce-secrets
          key: redis-password
    - name: LOG_LEVEL
      value: "info"
    - name: METRICS_PORT
      value: "9090"
    volumeMounts:
    - name: shared-storage
      mountPath: /app/logs
      subPath: logs
    - name: shared-storage
      mountPath: /app/cache
      subPath: cache
    - name: shared-storage
      mountPath: /tmp
      subPath: tmp
    - name: app-config-volume
      mountPath: /app/config
      readOnly: true
    resources:
      requests:
        memory: "512Mi"
        cpu: "300m"
        ephemeral-storage: "1Gi"
      limits:
        memory: "1Gi"
        cpu: "800m"
        ephemeral-storage: "2Gi"
    securityContext:
      runAsUser: 1000
      runAsGroup: 2000
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
        add:
        - NET_BIND_SERVICE
    livenessProbe:
      httpGet:
        path: /health
        port: 8080
        scheme: HTTP
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1
    readinessProbe:
      httpGet:
        path: /ready
        port: 8080
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 3
      successThreshold: 1
    startupProbe:
      httpGet:
        path: /startup
        port: 8080
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 30
      successThreshold: 1
  
  # Redis cache sidecar
  - name: redis-cache
    image: redis:7.0-alpine
    ports:
    - containerPort: 6379
      name: redis
      protocol: TCP
    env:
    - name: REDIS_PASSWORD
      valueFrom:
        secretKeyRef:
          name: ecommerce-secrets
          key: redis-password
    volumeMounts:
    - name: shared-storage
      mountPath: /data
      subPath: redis-data
    - name: redis-config
      mountPath: /usr/local/etc/redis/redis.conf
      subPath: redis.conf
      readOnly: true
    command:
    - redis-server
    - /usr/local/etc/redis/redis.conf
    - --requirepass
    - $(REDIS_PASSWORD)
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "256Mi"
        cpu: "200m"
    securityContext:
      runAsUser: 999
      runAsGroup: 999
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
    livenessProbe:
      exec:
        command:
        - redis-cli
        - --no-auth-warning
        - -a
        - $(REDIS_PASSWORD)
        - ping
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
    readinessProbe:
      exec:
        command:
        - redis-cli
        - --no-auth-warning
        - -a
        - $(REDIS_PASSWORD)
        - ping
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 3
  
  # Nginx reverse proxy sidecar
  - name: nginx-proxy
    image: nginx:1.24-alpine
    ports:
    - containerPort: 80
      name: http
      protocol: TCP
    - containerPort: 443
      name: https
      protocol: TCP
    volumeMounts:
    - name: nginx-config
      mountPath: /etc/nginx/conf.d
      readOnly: true
    - name: shared-storage
      mountPath: /var/log/nginx
      subPath: nginx-logs
    - name: nginx-cache
      mountPath: /var/cache/nginx
    - name: nginx-run
      mountPath: /var/run
    resources:
      requests:
        memory: "64Mi"
        cpu: "50m"
      limits:
        memory: "128Mi"
        cpu: "100m"
    securityContext:
      runAsUser: 101
      runAsGroup: 101
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
        add:
        - NET_BIND_SERVICE
    livenessProbe:
      httpGet:
        path: /nginx-health
        port: 80
      initialDelaySeconds: 10
      periodSeconds: 10
    readinessProbe:
      httpGet:
        path: /nginx-health
        port: 80
      initialDelaySeconds: 5
      periodSeconds: 5
  
  # Prometheus metrics exporter sidecar
  - name: metrics-exporter
    image: prom/node-exporter:v1.6.0
    ports:
    - containerPort: 9100
      name: metrics
      protocol: TCP
    args:
    - --path.rootfs=/host
    - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
    - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
    - --web.disable-exporter-metrics
    - --collector.disable-defaults
    - --collector.meminfo
    - --collector.diskstats
    - --collector.cpu
    - --collector.loadavg
    - --collector.filesystem
    volumeMounts:
    - name: proc
      mountPath: /host/proc
      readOnly: true
    - name: sys
      mountPath: /host/sys
      readOnly: true
    resources:
      requests:
        memory: "32Mi"
        cpu: "25m"
      limits:
        memory: "64Mi"
        cpu: "50m"
    securityContext:
      runAsUser: 65534
      runAsGroup: 65534
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
    livenessProbe:
      httpGet:
        path: /
        port: 9100
      initialDelaySeconds: 10
      periodSeconds: 10
    readinessProbe:
      httpGet:
        path: /
        port: 9100
      initialDelaySeconds: 5
      periodSeconds: 5
  
  # Log shipper sidecar (Filebeat)
  - name: log-shipper
    image: docker.elastic.co/beats/filebeat:8.8.0
    volumeMounts:
    - name: shared-storage
      mountPath: /var/log/app
      subPath: logs
      readOnly: true
    - name: shared-storage
      mountPath: /var/log/nginx
      subPath: nginx-logs
      readOnly: true
    - name: filebeat-config
      mountPath: /usr/share/filebeat/filebeat.yml
      subPath: filebeat.yml
      readOnly: true
    - name: filebeat-data
      mountPath: /usr/share/filebeat/data
    env:
    - name: ELASTICSEARCH_HOST
      value: "elasticsearch.logging.svc.cluster.local"
    - name: ELASTICSEARCH_PORT
      value: "9200"
    - name: NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    resources:
      requests:
        memory: "64Mi"
        cpu: "25m"
      limits:
        memory: "128Mi"
        cpu: "50m"
    securityContext:
      runAsUser: 1000
      runAsGroup: 1000
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
  
  # Volumes
  volumes:
  - name: shared-storage
    emptyDir:
      sizeLimit: 5Gi
  - name: app-config-volume
    configMap:
      name: app-config
  - name: nginx-config
    configMap:
      name: nginx-config
  - name: redis-config
    configMap:
      name: redis-config
  - name: filebeat-config
    configMap:
      name: filebeat-config
  - name: filebeat-data
    emptyDir:
      sizeLimit: 1Gi
  - name: nginx-cache
    emptyDir:
      sizeLimit: 100Mi
  - name: nginx-run
    emptyDir:
      sizeLimit: 10Mi
      medium: Memory
  - name: proc
    hostPath:
      path: /proc
      type: Directory
  - name: sys
    hostPath:
      path: /sys
      type: Directory
  
  # Pod-level configurations
  restartPolicy: Always
  terminationGracePeriodSeconds: 30
  dnsPolicy: ClusterFirst
  serviceAccountName: ecommerce-service-account
  
  # Node selection and tolerations
  nodeSelector:
    kubernetes.io/os: linux
  
  tolerations:
  - key: "app"
    operator: "Equal"
    value: "ecommerce"
    effect: "NoSchedule"
  
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app
              operator: In
              values:
              - ecommerce
          topologyKey: kubernetes.io/hostname

---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ecommerce-service-account
  namespace: ecommerce-demo

---
# Service
apiVersion: v1
kind: Service
metadata:
  name: ecommerce-service
  namespace: ecommerce-demo
  labels:
    app: ecommerce
spec:
  selector:
    app: ecommerce
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: https
    port: 443
    targetPort: 443
    protocol: TCP
  - name: metrics
    port: 9100
    targetPort: 9100
    protocol: TCP
  type: ClusterIP

---
# Additional ConfigMaps
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: ecommerce-demo
data:
  redis.conf: |
    # Redis configuration for sidecar
    bind 0.0.0.0
    port 6379
    timeout 0
    tcp-keepalive 300
    daemonize no
    loglevel notice
    databases 16
    save 900 1
    save 300 10
    save 60 10000
    stop-writes-on-bgsave-error yes
    rdbcompression yes
    rdbchecksum yes
    dir /data
    maxmemory 200mb
    maxmemory-policy allkeys-lru
    appendonly yes
    appendfilename "appendonly.aof"
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb