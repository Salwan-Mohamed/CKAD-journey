# Nginx Configuration for Multi-Container Scenarios

# Configuration for Production E-commerce Application
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: default
data:
  default.conf: |
    upstream backend {
        server localhost:8080;
        keepalive 32;
    }
    
    upstream redis_backend {
        server localhost:6379;
    }
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    
    server {
        listen 80;
        server_name localhost;
        
        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # API endpoints with rate limiting
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Connection keep-alive
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }
        
        # Login endpoint with stricter rate limiting
        location /api/auth/login {
            limit_req zone=login burst=5 nodelay;
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Static files
        location /static/ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            proxy_pass http://backend;
        }
        
        # Default location
        location / {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Error pages
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
  
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log notice;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Logging format
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        'rt=$request_time uct="$upstream_connect_time" '
                        'uht="$upstream_header_time" urt="$upstream_response_time"';
        
        access_log /var/log/nginx/access.log main;
        
        # Performance settings
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        
        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_comp_level 6;
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/json
            application/javascript
            application/xml+rss
            application/atom+xml
            image/svg+xml;
        
        include /etc/nginx/conf.d/*.conf;
    }

---
# Migration Gateway Configurations
apiVersion: v1
kind: ConfigMap
metadata:
  name: migration-gateway-phase1
data:
  default.conf: |
    upstream legacy_monolith {
        server localhost:8080;
    }
    
    upstream user_service {
        server localhost:8081;
    }
    
    server {
        listen 80;
        server_name localhost;
        
        # Health check
        location /health {
            return 200 "gateway healthy - phase 1\n";
            add_header Content-Type text/plain;
        }
        
        # Route user API to new service (shadow testing)
        location /api/users {
            # Mirror traffic to new service for testing
            mirror /api/users/shadow;
            mirror_request_body on;
            
            proxy_pass http://legacy_monolith;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        # Shadow endpoint (for testing new service)
        location /api/users/shadow {
            internal;
            proxy_pass http://user_service/api/users;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        # All other traffic to monolith
        location / {
            proxy_pass http://legacy_monolith;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: migration-gateway-phase2
data:
  default.conf: |
    upstream core_monolith {
        server localhost:8080;
    }
    
    upstream user_service {
        server localhost:8081;
    }
    
    upstream order_service {
        server localhost:8082;
    }
    
    server {
        listen 80;
        server_name localhost;
        
        location /health {
            return 200 "gateway healthy - phase 2\n";
            add_header Content-Type text/plain;
        }
        
        # Route user API to microservice
        location /api/users {
            proxy_pass http://user_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        # Route order API with A/B testing
        location /api/orders {
            # Use custom header to determine routing
            set $backend core_monolith;
            if ($http_x_use_new_service = "true") {
                set $backend order_service;
            }
            
            proxy_pass http://$backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        # All other traffic to core monolith
        location / {
            proxy_pass http://core_monolith;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: migration-gateway-final
data:
  default.conf: |
    upstream api_core {
        server localhost:8080;
    }
    
    upstream user_service {
        server localhost:8081;
    }
    
    upstream order_service {
        server localhost:8082;
    }
    
    upstream product_service {
        server localhost:8083;
    }
    
    server {
        listen 80;
        server_name localhost;
        
        location /health {
            return 200 "gateway healthy - microservices\n";
            add_header Content-Type text/plain;
        }
        
        # Route to specific microservices
        location /api/users {
            proxy_pass http://user_service;
        }
        
        location /api/orders {
            proxy_pass http://order_service;
        }
        
        location /api/products {
            proxy_pass http://product_service;
        }
        
        # Core API for orchestration
        location /api/ {
            proxy_pass http://api_core;
        }
        
        # Default to core API
        location / {
            proxy_pass http://api_core;
        }
    }